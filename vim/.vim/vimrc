"===[ Plugin ]=== {{{
"
filetype off
set nocompatible

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeTabsToggle'] }
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'google/vim-searchindex'
Plug 'godlygeek/tabular'
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'zirrostig/vim-schlepp'
"Plug 'jlanzarotta/bufexplorer'
Plug 'jiangmiao/auto-pairs'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'RRethy/vim-illuminate'

Plug 'christoomey/vim-tmux-navigator'

" Languages
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'dag/vim-fish'
Plug 'othree/html5.vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'lepture/vim-jinja'

Plug 'yuezk/vim-js'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
Plug 'jparise/vim-graphql'
Plug 'cespare/vim-toml', { 'for': 'toml' }

Plug 'guns/vim-sexp', { 'for': ['clojure', 'scheme', 'lisp', 'timl'] }
Plug 'liquidz/vim-iced', { 'for': 'clojure' }

"Plug 'mechatroner/rainbow_csv'
Plug 'LnL7/vim-nix', { 'for': 'nix' }

" NERDTree {{{
augroup usr_nerdtree
    autocmd!
    autocmd StdinReadPre * let s:std_in=1
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

let exact_dir_names = [
\   '^\.cpcache$[[dir]]',
\   '^\.direnv$[[dir]]',
\   '^\.egg-info$[[dir]]',
\   '^\.git$[[dir]]',
\   '^\.idea$[[dir]]',
\   '^\.ipynb_checkpoints$[[dir]]',
\   '^\.mypy_cache$[[dir]]',
\   '^\.pytest_cache$[[dir]]',
\   '^\.sass-cache$[[dir]]',
\   '^\.serverless$[[dir]]',
\   '^\.venv$[[dir]]',
\   '^\.vscode$[[dir]]',
\   '^__pycache__$[[dir]]',
\   '^coverage$[[dir]]',
\   '^node_modules$[[dir]]',
\   '^vendor$[[dir]]',
\   '^venv$[[dir]]'
\]
let exact_file_names = [
\   '^Session.vim$[[file]]',
\   '^\.DS_Store$[[file]]'
\]
let file_suffixes = [
\   '\.exe$[[file]]',
\   '\.o$[[file]]',
\   '\.out$[[file]]',
\   '\.pyc$[[file]]'
\]
let NERDTreeIgnore = exact_dir_names + exact_file_names + file_suffixes
let NERDTreeStatusLine="%{matchstr(getline('.'),'\\s\\zs\\w\\(.*\\)')}"
let NERDTreeShowHidden=1
let NERDTreeSortHiddenFirst=1
" }}}
" YouCompleteMe {{{
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_max_num_candidates = 25
let g:ycm_filetype_blacklist = {
    \ 'tagbar': 1,
    \ 'qf': 1,
    \ 'notes': 1,
    \ 'markdown': 1,
    \ 'unite': 1,
    \ 'text': 1,
    \ 'vimwiki': 1,
    \ 'pandoc': 1,
    \ 'infolog': 1,
    \ 'mail': 1,
    \ 'html': 1,
    \ 'gitconfig': 1,
    \ 'tex': 1,
    \ 'bib': 0,
    \}
let g:ycm_use_ultisnips_completer = 1

" YCM diagnostic
hi YcmErrorSection cterm=underline ctermfg=196
hi YcmWarningSection cterm=underline ctermfg=196
let g:ycm_error_symbol = 'x'
let g:ycm_warning_symbol = '>'
let g:ycm_open_loclist_on_ycm_diags = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_autoclose_preview_window_after_completion = 1

" YCM paths
"let g:ycm_global_ycm_extra_conf = '/home/alan/.vim/.ycm_extra_conf.py'
"let g:ycm_server_python_interpreter = '/Volumes/Data/alan/venv/g/bin/python3'
let g:ycm_confirm_extra_conf = 0
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_extra_conf_vim_data = ['&filetype']
" }}}
" Schlepp {{{
let g:Schlepp#allowSquishingLines = 0
let g:Schlepp#allowSquishingBlock = 0
let g:Schlepp#trimWS = 0
" }}}
" Goyo {{{
let g:goyo_width = 105
" }}}
" illuminate {{{
hi link illuminatedWord Visual
" }}}

call plug#end()
filetype plugin indent on
syntax on

" }}}

"===[ Color scheme ]=== {{{
"
colorscheme my-onedark
set background=dark

" }}}

"===[ Default Syntax Package Options ]=== {{{
"
let g:tex_no_error = 1

" }}}

"===[ Options ]=== {{{
"
set backspace=eol,start,indent
set clipboard+=unnamedplus
set cursorline
set nofoldenable
set foldmethod=indent
set hidden
set history=10000
set hlsearch
set incsearch
set lazyredraw
set mouse=a
set number
set relativenumber
set scrolloff=7
set shortmess=aoOscF
let &showbreak='> '
set showcmd
set noshowmatch
set showmode
set sidescrolloff=3
set timeoutlen=200
set whichwrap+=<,>,h,l

set splitbelow
set splitright

" Statusline, Tabline,
set laststatus=2
set statusline=%!MyStatusLine('f')

set showtabline=1
set tabline=%!MyTabLine()

" Tab, indent, wrap
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=8

set autoindent
set smartindent
set expandtab
set list
exec "set listchars=tab:\u2015\u2015,trail:\uB7"

set colorcolumn=81
set formatoptions+=t
set textwidth=100
set nowrap

" Regex
set ignorecase
set magic
set smartcase

" Files, backups and undo
set autoread
set fileformat=unix
set fileencoding=utf8
set encoding=utf8
set noswapfile
set nowritebackup

" Command-line completion
set path=.,,**
set wildmenu
set wildignore=__pycache__,*.o,*.pyc,*.git,*.exe
set helpheight=30

" Make
set shellpipe=&>

" }}}

"===[ Mapping ]=== {{{
"
let g:mapleader=" "
let g:maplocalleader="'"

cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Swap undo
noremap    U   <C-r>
noremap <C-r>     U

" keep commands from moving the cursor around
noremap J    m`Jxg``

" Windows navigation
map <silent> <M-h>   :TmuxNavigateLeft<cr>
map <silent> <M-j>   :TmuxNavigateDown<cr>
map <silent> <M-k>   :TmuxNavigateUp<cr>
map <silent> <M-l>   :TmuxNavigateRight<cr>
map {H          <C-w>9<
map {J          <C-w>9-
map {K          <C-w>9+
map {L          <C-w>9>

" Buffer/Tab/Quickfix navigation
map <C-q>      :q<cr>
map <C-s>      :update<cr>
map <C-r>      :edit<cr>

map <C-h>      :tabprev<cr>
map <C-l>      :tabnext<cr>
map <C-j>      :bnext<cr>
map <C-k>      :bprev<cr>
map <C-n>      :cnext<cr>
map <C-p>      :cprev<cr>

" Mnemonic command shortcuts

map <leader>ee  :edit %%
map <leader>eh  :edit ~/
map <leader>ev  :view %%
map <leader>o   :tab sp<cr>

nnoremap <cr>                   o<esc>
nmap <leader>c              :echo HighlightName()<cr>

nmap <leader>fb             :Buffers<cr>
nmap <leader>ff             :Files<cr>
nmap <leader>fc             :Commands<cr>
nmap <leader>fm             :Commits<cr>
nmap <leader>fg             :Rg<cr>
nmap <leader>fp             :Filetypes<cr>

nmap <silent> -             :call Underline('-')<cr>
nmap <silent> =             :call Underline('=')<cr>
nmap <silent> <leader>'     :vsp<cr>
nmap <silent> <leader>"     :sp<cr>

"nmap <silent> <leader>m     :silent! make \| redraw! \| call ReportBuildResult()<cr>
nmap <silent> <leader>q     :quit<cr>
"nmap <silent> <leader>w     :w<cr>
nmap <silent> <leader>d     :bd<cr>

" toggles
nmap <silent> <leader>tp    :setlocal paste!<cr>
nmap <silent> <leader>tj    :call ToggleFastEsc()<cr>
nmap <silent> <leader>t1    :MyStatusLineLong<cr>
nmap <silent> <leader>t2    :MyStatusLineShort<cr>

nmap <silent> <leader>ts    :setlocal spell!<cr>
nmap <silent> <leader>tw    :setlocal wrap!<cr>
nmap <silent> <leader><leader>  :setlocal hlsearch!<cr>

" windows
nmap <leader>ww     <C-w>P
nmap <leader>wo     :tab sp<cr>
nmap <leader>wt     <C-w>T
nmap <leader>w=     <C-w>=

" buffers
nmap <leader>bb     :buffer 
nmap <leader>bd     :bd<cr>

nmap <F8>           :MarkdownPreview<cr>
nmap <C-e>          :NERDTreeToggle<cr>

nmap <leader>tt     :Tabularize /

nmap <leader>yx     :YcmCompleter FixIt<cr>
nmap <leader>yg     :YcmCompleter GoToDefinition<cr>
nmap <leader>yr     :YcmCompleter GoToReferences<cr>

nmap <leader>ga     :Gwrite<cr>
nmap <leader>gl     :Glog<cr>
nmap <leader>gb     :Git blame<cr>
nmap <leader>gdd    :Git diff<cr>
nmap <leader>gdv    :Gvdiffsplit<cr>
nmap <leader>gs     :G<cr>

" vim-which-key setup
let g:which_key_disable_default_offset = 1

let g:leader_map = {}
let g:leader_map['name'] = 'root'
let g:leader_map['b'] = {
    \ 'name': '+buffer',
    \ 'd': 'delete-current-buffer',
    \ 'l': 'list-buffers',
    \ }
let g:leader_map['w'] = {
    \ 'name': '+window',
    \ '=': 'balance-windows',
    \ 'o': 'move-to-new-tab',
    \ 't': 'move-to-new-tab',
    \ 'w': 'other-window',
    \ }
let g:leader_map['e'] = { 'name': '+edit' }
let g:leader_map['h'] = { 'name': '+gitgutter' }
let g:leader_map['f'] = { 'name': '+fzf' }
let g:leader_map['g'] = { 'name': '+git' }
let g:leader_map['t'] = { 'name': '+toggle' }
let g:leader_map['y'] = { 'name': '+ycm' }

let g:leader_map["'"] = "split-vertical"
let g:leader_map['"'] = "split-horizontal"
let g:leader_map[' '] = "toggle-local-hlsearch"
let g:leader_map['s'] = "toggle-local-spell"

let g:leader_map['<Tab>'] = "toggle-local-wrap"

call which_key#register(' ', "g:leader_map")
nnoremap <silent> <leader>          :WhichKey '<space>'<CR>
vnoremap <silent> <leader>          :WhichKeyVisual '<space>'<CR>

let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"

vmap <up>      <Plug>SchleppUp
vmap <down>    <Plug>SchleppDown
vmap <left>    <Plug>SchleppLeft
vmap <right>   <Plug>SchleppRight

let g:tmux_navigator_no_mappings = 1

" }}}

"===[ Commands ]=== {{{
"
command! MyStatusLineShort
    \ set statusline=%!MyStatusLine('t') |
    \ echohl Debug |
    \ echo "Relative path (statusline)"
command! MyStatusLineLong
    \ set statusline=%!MyStatusLine('f') |
    \ echohl Debug |
    \ echo "Full path (statusline)"

" }}}

"===[ Abbrevation ]=== {{{
"
" Common typos
iabbrev fro         for
iabbrev adn         and
iabbrev swithc      switch
iabbrev swihtc      switch
iabbrev siwthc      switch
iabbrev csae        case
iabbrev caes        case

" }}}

"===[ Helper functions]=== {{{
"
function! HasPaste()
    if &paste
        return '[PASTE MODE]'
    endif
    return ''
endfunction

" Format home directory into ~ and truncate the beginning of the path.
function! ShortCwd(len)
    let cwd=getcwd()
    let cwd=substitute(cwd, '/home/[^/]\+', '~', '')
    let cwd=substitute(cwd, '[^~].*\(.\{' . a:len . '\}$\)\@=', '/...', '')
    let cwd=substitute(cwd, '\.\.\.[^/]*', '...', '')
    return cwd
endfunction

function! PathFilename(path)
    let name = split(a:path, '/')
    if len(name) == 0
        return '[no name]'
    elseif len(name) < 4
        return a:path
    else
        return name[0] . '/.../' . name[-2] . '/' . name[-1]
endfunction

function! MyTabLabel(n)
    let wincount = tabpagewinnr(a:n, '$')
    let winnr = tabpagewinnr(a:n)
    let bufls = tabpagebuflist(a:n)
    return PathFilename(bufname(bufls[winnr - 1])) . ' (' . wincount . ')'
endfunction

function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        let s .= '%' . (i + 1) . 'T'
        let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor

    let s .= '%#TabLineFill#%T'

    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999Xclose'
    endif
    return s
endfunction

function! HighlightName()
    let id  = synID(line("."), col("."), 1)
    let tid = synID(line("."), col("."), 0)

    let fg  = synIDattr(synIDtrans(id), "fg")
    let bg  = synIDattr(synIDtrans(id), "bg")
    let hi  = synIDattr(id, "name")
    let lo  = synIDattr(synIDtrans(id), "name")
    let tr  = synIDattr(tid, "name")

    return "hi: ".hi." \| lo: ".lo." \| trans: ".tr." \| fg: ".fg." \| bg: ".bg
endfunction

function! EnableFastEsc()
    let b:fastesc=1
    inoremap <buffer> jj <esc>
    echom "Enabled insert mdoe fast <esc>"
endfunction!

function! DisableFastEsc()
    unlet b:fastesc
    iunmap <buffer> jj
    echom "Disabled insert mdoe fast <esc>"
endfunction!

function! ToggleFastEsc()
    if get(b:, 'fastesc', 0)
        call DisableFastEsc()
    else
        call EnableFastEsc()
    endif
endfunction

function! Underline(symbol)
    let line = getline('.')
    let llen = strlen(line)
    let str = ''
    if llen > 0
        let widx = match(line, '\S')
        for ii in range(widx)
            let str = str . " "
        endfor
        for ii in range(llen - widx)
            let str = str . a:symbol
        endfor
        call setreg("y", str)
        exec "normal! o\<esc>\"yp"
    endif
endfunction

function! ReportBuildResult()
    if len(getqflist()) != 0
        copen | cc
        echohl Tag
        echo "Build fail!"
        echohl None
    else
        echo "Build success!"
    endif
endfunction

function! GitBranch()
    let l:branchname = system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
    return strlen(l:branchname) > 0 ? '  ' . l:branchname . ' ' : ''
endfunction

function! MyStatusLine(pathformat)
    " Git branch, Flags, Buffer number, File name | File type, Row/Column, Percent down file
        "\'%#StatusLineGit#',
        "\'%{GitBranch()}',
        "\'%#User{1}#',
    return join([
        \' %q%w%r%m%{HasPaste()}',
        \'%n:%' . a:pathformat,
        \'%=',
        \'%y %l,%-2c |%3p%% '
        \], '')
endfunction

function! TrimSpace()
    %s/\s\+$//e
endfunction

function! TryTrimSpace()
    if &ft =~ 'markdown'
        return
    else
        call TrimSpace()
    endif
endfunction

" }}}

"===[ Autocommands setup ]=== {{{
"
augroup usr
    autocmd!
    autocmd BufWrite    *.clj,*.py,*.js call TryTrimSpace()
    autocmd BufEnter    * silent call EnableFastEsc()
    autocmd BufNewfile  *.php r ~/.vim/template/template.php | normal kdd
    autocmd BufRead     *.vim set foldmethod=marker
    "autocmd VimEnter    *.c,*.cpp,*.py vsp

    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif

augroup END

" }}}

"===[ Generic highlights ]=== {{{
"
syn keyword Todo    TODO NOTE FIXME REFACTOR HARDCODE HACK
syn keyword Todo    Todo Note Fixme Refactor Hardcode Hack
syn keyword Todo    todo note fixme refactor hardcode hack

hi link Noise Special

" }}}

" vim: foldmethod=marker
