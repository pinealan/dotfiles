"===[ Color scheme ]=== {{{
"
colorscheme my-onedark
set background=dark

" }}}

"===[ Builtin syntax + indent configs ]=== {{{
"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
let g:tex_no_error = 1

let g:clojure_discard_macro = v:true

" }}}

"===[ Options ]=== {{{
"
set backspace=eol,start,indent
set clipboard+=unnamedplus
set cursorline
set nofoldenable
set foldmethod=indent
set hidden
set history=10000
set hlsearch
set incsearch
set lazyredraw
set mouse=a
set number
set relativenumber
set scrolloff=7
set shortmess=aoOscF
let &showbreak='> '
set showcmd
set noshowmatch
set showmode
set sidescrolloff=3
set spellfile=~/.vim/spell/en.utf-8.add
set timeoutlen=200
set whichwrap+=<,>,h,l

set splitbelow
set splitright

" Statusline, Tabline,
set laststatus=2
set statusline=%!MyStatusLine('f')

set showtabline=1
set tabline=%!MyTabLine()

" Tab, indent, wrap
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=8

set autoindent
set smartindent
set expandtab
set list
exec "set listchars=tab:>\u2015,trail:\uB7"

set colorcolumn=81,101
set formatoptions+=t
set textwidth=100
set nowrap

" Regex
set ignorecase
set magic
set smartcase

" Files, backups and undo
set autoread
set fileformat=unix
set fileencoding=utf8
set encoding=utf8
set noswapfile
set nowritebackup

" Command-line completion
set path=.,,**
set wildmenu
set wildignore=__pycache__,*.o,*.pyc,*.git,*.exe
set helpheight=30

" Make
set shellpipe=&>

" }}}

"===[ Functions ]=== {{{
"
function! HasPaste()
    if &paste
        return '[PASTE MODE]'
    endif
    return ''
endfunction

function! PathFilename(path)
    let name = split(a:path, '/')
    if len(name) == 0
        return '[no name]'
    elseif len(name) < 3
        return a:path
    else
        let s = ''
        for i in range(len(name) - 2)
            let s .= name[i][0] . '/'
        endfor
        return s . name[-2] . '/' . name[-1]
endfunction

function! MyTabLabel(n)
    "let wincount = tabpagewinnr(a:n, '$')
    let winnr = tabpagewinnr(a:n)
    let bufls = tabpagebuflist(a:n)
    return PathFilename(bufname(bufls[winnr - 1]))
endfunction

function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        let s .= '%' . (i + 1) . 'T'
        let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor

    let s .= '%#TabLineFill#%T'

    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999Xclose'
    endif
    return s
endfunction

function! EnableFastEsc()
    let b:fastesc=1
    inoremap <buffer> jj <esc>
    echom "Enabled insert mdoe fast <esc>"
endfunction!

function! DisableFastEsc()
    unlet b:fastesc
    iunmap <buffer> jj
    echom "Disabled insert mdoe fast <esc>"
endfunction!

function! ToggleFastEsc()
    if get(b:, 'fastesc', 0)
        call DisableFastEsc()
    else
        call EnableFastEsc()
    endif
endfunction

function! Underline(symbol)
    let line = getline('.')
    let llen = strlen(line)
    let str = ''
    if llen > 0
        let widx = match(line, '\S')
        for ii in range(widx)
            let str = str . " "
        endfor
        for ii in range(llen - widx)
            let str = str . a:symbol
        endfor
        call setreg("y", str)
        exec "normal! o\<esc>\"yp"
    endif
endfunction

function! MyStatusLine(pathformat)
    " [Flags]*File name <gap> [File type] Row,Column | Percent down file
    return join([
        \' %q%w%r%m%{HasPaste()}',
        \'%' . a:pathformat,
        \'%=',
        \'%y %l,%-2c |%3p%% '
        \], '')
endfunction

function! TrimSpace()
    %s/\s\+$//e
endfunction

function! TryTrimSpace()
    if &ft =~ 'markdown'
        return
    else
        call TrimSpace()
    endif
endfunction

" }}}

"===[ Abbrevation ]=== {{{
"
" Common typos
iabbrev fro         for
iabbrev adn         and
iabbrev swithc      switch
iabbrev swihtc      switch
iabbrev siwthc      switch
iabbrev csae        case
iabbrev caes        case

" }}}

"===[ Generic highlights ]=== {{{
"
syn keyword Todo    TODO NOTE FIXME REFACTOR HARDCODE HACK
syn keyword Todo    Todo Note Fixme Refactor Hardcode Hack
syn keyword Todo    todo note fixme refactor hardcode hack

hi link Noise Special
" }}}

" vim: foldmethod=marker
