"===[ Plugin ]=== {{{
"
filetype off
set nocompatible

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeTabsToggle'] }
" NERDTree {{{
augroup usr_nerdtree
    autocmd!
    autocmd StdinReadPre * let s:std_in=1
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

let exact_dir_names = [
\   '^\.cpcache$[[dir]]',
\   '^\.direnv$[[dir]]',
\   '^\.egg-info$[[dir]]',
\   '^\.git$[[dir]]',
\   '^\.idea$[[dir]]',
\   '^\.ipynb_checkpoints$[[dir]]',
\   '^\.mypy_cache$[[dir]]',
\   '^\.pytest_cache$[[dir]]',
\   '^\.sass-cache$[[dir]]',
\   '^\.serverless$[[dir]]',
\   '^\.venv$[[dir]]',
\   '^\.vscode$[[dir]]',
\   '^__pycache__$[[dir]]',
\   '^coverage$[[dir]]',
\   '^node_modules$[[dir]]',
\   '^vendor$[[dir]]',
\   '^venv$[[dir]]'
\]
let exact_file_names = [
\   '^Session.vim$[[file]]',
\   '^\.DS_Store$[[file]]'
\]
let file_suffixes = [
\   '\.exe$[[file]]',
\   '\.out$[[file]]',
\   '\.pyc$[[file]]'
\]
let NERDTreeIgnore = exact_dir_names + exact_file_names + file_suffixes
let NERDTreeStatusLine="%{matchstr(getline('.'),'\\s\\zs\\w\\(.*\\)')}"
let NERDTreeShowHidden=1
let NERDTreeSortHiddenFirst=1
" }}}
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-obsession'
Plug 'google/vim-searchindex'
Plug 'godlygeek/tabular'
Plug 'Valloric/YouCompleteMe'
" YouCompleteMe {{{
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_max_num_candidates = 25
let g:ycm_filetype_blacklist = {
    \ 'tagbar': 1,
    \ 'qf': 1,
    \ 'notes': 1,
    \ 'markdown': 1,
    \ 'unite': 1,
    \ 'text': 1,
    \ 'vimwiki': 1,
    \ 'pandoc': 1,
    \ 'infolog': 1,
    \ 'mail': 1,
    \ 'html': 1,
    \ 'gitconfig': 1,
    \ 'tex': 1,
    \ 'bib': 0,
    \}
let g:ycm_use_ultisnips_completer = 1

" YCM diagnostic
hi YcmErrorSection cterm=underline ctermfg=196
hi YcmWarningSection cterm=underline ctermfg=196
let g:ycm_error_symbol = 'x'
let g:ycm_warning_symbol = '>'
let g:ycm_open_loclist_on_ycm_diags = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_autoclose_preview_window_after_completion = 1

" YCM paths
"let g:ycm_global_ycm_extra_conf = '/home/alan/.vim/.ycm_extra_conf.py'
"let g:ycm_server_python_interpreter = '/Volumes/Data/alan/venv/g/bin/python3'
let g:ycm_confirm_extra_conf = 0
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_extra_conf_vim_data = ['&filetype']
" }}}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'zirrostig/vim-schlepp'
" Schlepp {{{
let g:Schlepp#allowSquishingLines = 0
let g:Schlepp#allowSquishingBlock = 0
let g:Schlepp#trimWS = 0
" }}}
Plug 'jlanzarotta/bufexplorer'
" BufExplorer {{{
let g:bufExplorerFindActive=0
let g:bufExplorerShowNoName=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerSortBy='name'
let g:bufExplorerSplitHorzSize=10
let g:bufExplorerSplitVertSize=51
" }}}
Plug 'jiangmiao/auto-pairs'
Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
" Goyo {{{
let g:goyo_width = 105
" }}}
Plug 'liuchengxu/vim-which-key'

" Languages
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'dag/vim-fish'
Plug 'othree/html5.vim', { 'for': 'html' }
" HTML5 {{{
"let g:html_exclude_tags = ['html', 'body', 'head']
" }}}
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'leafgarland/typescript-vim', { 'for': 'ts' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' }
Plug 'peitalin/vim-jsx-typescript'
Plug 'mustache/vim-mustache-handlebars'
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'jparise/vim-graphql'
Plug 'lepture/vim-jinja'
Plug 'mechatroner/rainbow_csv'
Plug 'LnL7/vim-nix'
Plug 'tpope/vim-fireplace'

call plug#end()
filetype plugin indent on
syntax on

" }}}

"===[ Color scheme ]=== {{{
"
colorscheme my-onedark
set background=dark

" }}}

"===[ Default Syntax Package Options ]=== {{{
"
let g:tex_no_error = 1

" }}}

"===[ Options ]=== {{{
"
set backspace=eol,start,indent
set cursorline
set nofoldenable
set foldmethod=indent
set hidden
set history=500
set hlsearch
set incsearch
set lazyredraw
set mouse=a
set number
set relativenumber
set scrolloff=7
set shortmess=aoOscF
let &showbreak='> '
set showcmd
set noshowmatch
set showmode
set sidescrolloff=3
set timeoutlen=240
set whichwrap+=<,>,h,l

set splitbelow
set splitright

" Statusline, Tabline,
set laststatus=2
set statusline=%!MyStatusLine('f')

set showtabline=1
set tabline=%!MyTabLine()

" Tab, indent, wrap
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=8

set autoindent
set smartindent
set expandtab
set list
exec "set listchars=tab:\u2015\u2015,trail:\uB7"

set colorcolumn=81
set formatoptions+=t
set textwidth=100
set nowrap

" Regex
set ignorecase
set magic
set smartcase

" Files, backups and undo
set autoread
set fileformat=unix
set fileencoding=utf8
set encoding=utf8
set noswapfile
set nowritebackup

" Command-line completion
set path=.,,**
set wildmenu
set wildignore=__pycache__,*.o,*.pyc,*.git,*.exe
set helpheight=30

" Make
set shellpipe=&>

" }}}

"===[ Mapping ]=== {{{
"

" Thank me later
noremap ; :
noremap : ;

" Homerow navigation
noremap H 0
noremap J L
noremap K H
noremap L $

noremap $ J
noremap 0 K

" Swap undo
noremap    U   <c-r>
noremap <c-r>     U

" Windows navigation
noremap [p          <c-w>P
noremap [h          <c-w>h
noremap [j          <c-w>j
noremap [k          <c-w>k
noremap [l          <c-w>l
noremap [o          <c-w>o
noremap {<s-h>      <c-w>9<
noremap {<s-j>      <c-w>9-
noremap {<s-k>      <c-w>9+
noremap {<s-l>      <c-w>9>

" Buffer/Tab/Quickfix navigation
noremap <c-q>      :qa<cr>
noremap <c-s>      :update<cr>
noremap <c-r>      :edit<cr>
noremap <c-h>      :tabprev<cr>
noremap <c-l>      :tabnext<cr>
noremap <c-j>      :bnext<cr>
noremap <c-k>      :bprev<cr>
noremap <c-n>      :cnext<cr>
noremap <c-p>      :cprev<cr>

" Command shortchuts
let mapleader=" "
let maplocalleader=","

nnoremap <cr>                   o<esc>
nnoremap <F9>                   :echo HighlightName()<cr>
nnoremap <silent><leader>c      :echo HighlightName()<cr>
nnoremap <leader>w              :w !sudo tee % > /dev/null
nnoremap <leader>f              :set filetype=
nnoremap <silent><leader>k      :FZF<cr>

" create a fold for the pair of parenthesis/brackets under the cursor
" Todo make this command into a safer function and with validation under cursor
nnoremap <leader>o          v%zF

nnoremap <silent> -             :call Underline('-')<cr>
nnoremap <silent> =             :call Underline('=')<cr>
nnoremap <silent> <leader>'     :vsp<cr>
nnoremap <silent> <leader>"     :sp<cr>
nnoremap <silent> <leader>b     :let g:bufExplorerSplitHorzSize = len(getbufinfo({'buflisted': 1})) + 4 \| BufExplorerHorizontalSplit<cr>
nnoremap <silent> <leader>e     :vsplit $MYVIMRC<cr>
nnoremap <silent> <leader>m     :silent! make \| redraw! \| call ReportBuildResult()<cr>
nnoremap <silent> <leader>n     :vnew \| set ft=markdown<cr>
nnoremap <silent> <leader>p     :setlocal paste!<cr>
nnoremap <silent> <leader>q     :q<cr>

" toggles
nnoremap <leader>s          :setlocal spell!<cr>
nnoremap <leader><tab>      :setlocal wrap!<cr>
nnoremap <leader><leader>   :setlocal hlsearch!<cr>
nnoremap <leader>j          :call ToggleFastEsc()<cr>
nnoremap <leader>1          :set statusline=%!MyStatusLine('t') \| echohl Debug \| echo "Base name (statusline)"<cr>
nnoremap <leader>2          :set statusline=%!MyStatusLine('f') \| echohl Debug \| echo "Relative path (statusline)"<cr>

" Plugin mapping
nnoremap <silent> <leader>  :WhichKey '<Space>'<CR>

nnoremap <c-e>          :NERDTreeToggle<cr>

nnoremap <leader>t      :Tabularize /

nnoremap <F8>           :MarkdownPreview<cr>

nnoremap <leader>yx     :YcmCompleter FixIt<cr>
nnoremap <leader>yg     :YcmCompleter GoToDefinition<cr>
nnoremap <leader>yr     :YcmCompleter GoToReferences<cr>

nnoremap <leader>ga     :Gwrite<cr>
nnoremap <leader>gl     :Glog<cr>

nnoremap bhs      :BufExplorerHorizontalSplit<cr>
nnoremap bvs      :BufExplorerVerticalSplit<cr>

let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

vmap <up>      <Plug>SchleppUp
vmap <down>    <Plug>SchleppDown
vmap <left>    <Plug>SchleppLeft
vmap <right>   <Plug>SchleppRight

" }}}

"===[ Commands ]=== {{{
"
command! Bhs BufExplorerHorizontalSplit
command! Bvs BufExplorerVerticalSplit

" }}}

"===[ Abbrevation ]=== {{{
"
" Common typos
iabbrev fro         for
iabbrev adn         and
iabbrev swithc      switch
iabbrev swihtc      switch
iabbrev siwthc      switch
iabbrev csae        case
iabbrev caes        case

" Auto closing brackets
"inoremap " ""<left>
"inoremap ' ''<left>
"inoremap ( ()<left>
"inoremap [ []<left>
"inoremap { {}<left>
"inoremap {<CR> {<CR>}<ESC>O
"inoremap {;<CR> {<CR>};<ESC>O

" }}}

"===[ Helper functions]=== {{{
"
function! HasPaste()
    if &paste
        return '[PASTE MODE]'
    endif
    return ''
endfunction

" Format home directory into ~ and truncate the beginning of the path.
function! ShortCwd(len)
    let cwd=getcwd()
    let cwd=substitute(cwd, '/home/[^/]\+', '~', '')
    let cwd=substitute(cwd, '[^~].*\(.\{' . a:len . '\}$\)\@=', '/...', '')
    let cwd=substitute(cwd, '\.\.\.[^/]*', '...', '')
    return cwd
endfunction

function! PathFilename(path)
    let name=split(a:path, '/')
    if len(name) == 0
        return '[no name]'
    elseif len(name) < 4
        return a:path
    else
        return name[0] . '/.../' . name[-2] . '/' . name[-1]
endfunction

function! MyTabLabel(n)
    let wincount = tabpagewinnr(a:n, '$')
    let winnr = tabpagewinnr(a:n)
    let bufls = tabpagebuflist(a:n)
    return PathFilename(bufname(bufls[winnr - 1])) . ' (' . wincount . ')'
endfunction

function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        let s .= '%' . (i + 1) . 'T'
        let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor

    let s .= '%#TabLineFill#%T'

    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999Xclose'
    endif
    return s
endfunction

function! HighlightName()
    let id  = synID(line("."), col("."), 1)
    let tid = synID(line("."), col("."), 0)

    let fg  = synIDattr(synIDtrans(id), "fg")
    let bg  = synIDattr(synIDtrans(id), "bg")
    let hi  = synIDattr(id, "name")
    let lo  = synIDattr(synIDtrans(id), "name")
    let tr  = synIDattr(tid, "name")

    return "hi: ".hi." \| lo: ".lo." \| trans: ".tr." \| fg: ".fg." \| bg: ".bg
endfunction

function! EnableFastEsc()
    let b:fastesc=1
    inoremap <buffer> jj <esc>
    echom "Enabled insert mdoe fast <esc>"
endfunction!

function! DisableFastEsc()
    unlet b:fastesc
    iunmap <buffer> jj
    echom "Disabled insert mdoe fast <esc>"
endfunction!

function! ToggleFastEsc()
    if get(b:, 'fastesc', 0)
        call DisableFastEsc()
    else
        call EnableFastEsc()
    endif
endfunction

function! Underline(symbol)
    let line = getline('.')
    let llen = strlen(line)
    let str = ''
    if llen > 0
        let widx = match(line, '\S')
        for ii in range(widx)
            let str = str . " "
        endfor
        for ii in range(llen - widx)
            let str = str . a:symbol
        endfor
        call setreg("y", str)
        exec "normal! o\<esc>\"yp"
    endif
endfunction

function! ReportBuildResult()
    if len(getqflist()) != 0
        copen | cc
        echohl Tag
        echo "Build fail!"
        echohl None
    else
        echo "Build success!"
    endif
endfunction

function! GitBranch()
    let l:branchname = system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
    return strlen(l:branchname) > 0 ? '  ' . l:branchname . ' ' : ''
endfunction

function! MyStatusLine(pathformat)
    " Git branch, Flags, Buffer number, File name | File type, Row/Column, Percent down file
        "\'%#StatusLineGit#',
        "\'%{GitBranch()}',
        "\'%#User{1}#',
    return join([
        \' %q%w%r%m%{HasPaste()}',
        \'%n:%' . a:pathformat,
        \'%=',
        \'%y %l,%-2c |%3p%% '
        \], '')
endfunction

function! TrimSpace()
    %s/\s\+$//e
endfunction

function! TryTrimSpace()
    if &ft =~ 'markdown'
        return
    else
        call TrimSpace()
    endif
endfunction

" }}}

"===[ Autocommands setup ]=== {{{
"
augroup usr
    autocmd!

    autocmd BufWrite    * call TryTrimSpace()
    autocmd BufEnter    * silent call EnableFastEsc()
    autocmd BufNewfile  *.php r ~/.vim/template/template.php | normal kdd

    "autocmd VimEnter    *.c,*.cpp,*.py vsp
augroup END

" }}}

"===[ Generic highlights ]=== {{{
"
syn keyword Todo    TODO NOTE FIXME REFACTOR HARDCODE HACK
syn keyword Todo    Todo Note Fixme Refactor Hardcode Hack
syn keyword Todo    todo note fixme refactor hardcode

hi link Noise Special

" }}}

" vim: foldmethod=marker
