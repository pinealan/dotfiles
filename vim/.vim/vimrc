"===[ Color scheme ]=== {{{
"
colorscheme my-onedark
set background=dark

" }}}

"===[ Builtin syntax + indent configs ]=== {{{
"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
let g:tex_no_error = 1

let g:clojure_discard_macro = v:true

" }}}

"===[ Options ]=== {{{
"
set backspace=eol,start,indent
set clipboard+=unnamedplus
set cursorline
set nofoldenable
set foldmethod=indent
set hidden
set history=10000
set hlsearch
set incsearch
set lazyredraw
set mouse=a
set number
set relativenumber
set scrolloff=7
set shortmess=aoOscF
let &showbreak='> '
set showcmd
set noshowmatch
set showmode
set sidescrolloff=3
set spellfile=~/.vim/spell/en.utf-8.add
set timeoutlen=200
set whichwrap+=<,>,h,l

set splitbelow
set splitright

" Statusline, Tabline,
set laststatus=2
set statusline=%!MyStatusLine('f')

set showtabline=1
set tabline=%!MyTabLine()

" Tab, indent, wrap
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=8

set autoindent
set smartindent
set expandtab
set list
exec "set listchars=tab:>\u2015,trail:\uB7"

set colorcolumn=81,101
set formatoptions+=t
set textwidth=100
set nowrap

" Regex
set ignorecase
set magic
set smartcase

" Files, backups and undo
set autoread
set fileformat=unix
set fileencoding=utf8
set encoding=utf8
set noswapfile
set nowritebackup

" Command-line completion
set path=.,,**
set wildmenu
set wildignore=__pycache__,*.o,*.pyc,*.git,*.exe
set helpheight=30

" Make
set shellpipe=&>

" }}}

"===[ Functions ]=== {{{
"
function! HasPaste()
    if &paste
        return '[PASTE MODE]'
    endif
    return ''
endfunction

" Format home directory into ~ and truncate the beginning of the path.
function! ShortCwd(len)
    let cwd=getcwd()
    let cwd=substitute(cwd, '/home/[^/]\+', '~', '')
    let cwd=substitute(cwd, '[^~].*\(.\{' . a:len . '\}$\)\@=', '/...', '')
    let cwd=substitute(cwd, '\.\.\.[^/]*', '...', '')
    return cwd
endfunction

function! PathFilename(path)
    let name = split(a:path, '/')
    if len(name) == 0
        return '[no name]'
    elseif len(name) < 3
        return a:path
    else
        let s = ''
        for i in range(len(name) - 2)
            let s .= name[i][0] . '/'
        endfor
        return s . name[-2] . '/' . name[-1]
endfunction

function! MyTabLabel(n)
    "let wincount = tabpagewinnr(a:n, '$')
    let winnr = tabpagewinnr(a:n)
    let bufls = tabpagebuflist(a:n)
    return PathFilename(bufname(bufls[winnr - 1]))
endfunction

function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        let s .= '%' . (i + 1) . 'T'
        let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor

    let s .= '%#TabLineFill#%T'

    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999Xclose'
    endif
    return s
endfunction

function! EnableFastEsc()
    let b:fastesc=1
    inoremap <buffer> jj <esc>
    echom "Enabled insert mdoe fast <esc>"
endfunction!

function! DisableFastEsc()
    unlet b:fastesc
    iunmap <buffer> jj
    echom "Disabled insert mdoe fast <esc>"
endfunction!

function! ToggleFastEsc()
    if get(b:, 'fastesc', 0)
        call DisableFastEsc()
    else
        call EnableFastEsc()
    endif
endfunction

function! Underline(symbol)
    let line = getline('.')
    let llen = strlen(line)
    let str = ''
    if llen > 0
        let widx = match(line, '\S')
        for ii in range(widx)
            let str = str . " "
        endfor
        for ii in range(llen - widx)
            let str = str . a:symbol
        endfor
        call setreg("y", str)
        exec "normal! o\<esc>\"yp"
    endif
endfunction

function! ReportBuildResult()
    if len(getqflist()) != 0
        copen | cc
        echohl Tag
        echo "Build fail!"
        echohl None
    else
        echo "Build success!"
    endif
endfunction

function! GitBranch()
    let l:branchname = system(
        \ "git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'"
        \ )
    return strlen(l:branchname) > 0 ? '  ' . l:branchname . ' ' : ''
endfunction

function! MyStatusLine(pathformat)
    " [Flags]*File name <gap> [File type] Row,Column | Percent down file
    return join([
        \' %q%w%r%m%{HasPaste()}',
        \'%' . a:pathformat,
        \'%=',
        \'%y %l,%-2c |%3p%% '
        \], '')
endfunction

function! TrimSpace()
    %s/\s\+$//e
endfunction

function! TryTrimSpace()
    if &ft =~ 'markdown'
        return
    else
        call TrimSpace()
    endif
endfunction

function! RipgrepFzf(query, fullscreen)
  let command_fmt = join([
    \ 'rg',
    \ '--column',
    \ '--line-number',
    \ '--no-heading',
    \ '--color=always',
    \ '--smart-case',
    \ '-- %s || true'
    \ ], ' ')
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {
    \ 'options': [
    \   '--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command
    \ ]}
  call fzf#vim#grep(
    \ initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

" }}}

"===[ Commands ]=== {{{
"
command! MyStatusLineShort
    \ set statusline=%!MyStatusLine('t') |
    \ echohl Debug |
    \ echo "Relative path (statusline)"
command! MyStatusLineLong
    \ set statusline=%!MyStatusLine('f') |
    \ echohl Debug |
    \ echo "Full path (statusline)"

command! Files
    \ call fzf#run(fzf#wrap('files-all', {'source': 'fd . -H -L -E .git -t f'}))
command! FilesAll
    \ call fzf#run(fzf#wrap('files-all', {'source': 'fd . -H -I -L -t f -t l'}))
command! -nargs=* -bang RG
    \ call RipgrepFzf(<q-args>, <bang>0)

" }}}

"===[ Mapping ]=== {{{
"
cnoremap %% <C-R>=substitute(expand('%:h').'/', '^\./', '', '')<cr>

" Swap undo
noremap    U   <C-r>
noremap <C-r>     U

" Keep commands from moving the cursor around
nnoremap <silent> n    nzzzv:SearchIndex<cr>
nnoremap <silent> N    Nzzzv:SearchIndex<cr>
nnoremap <silent> J    mzJ`z

" Easier newline
nnoremap <cr>  o<esc>
nnoremap Y     y$

" Set undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ; ;<c-g>u

" Windows navigation
map <silent> <M-h>   <C-w>h
map <silent> <M-j>   <C-w>j
map <silent> <M-k>   <C-w>k
map <silent> <M-l>   <C-w>l
"map {H          <C-w>9<
"map {J          <C-w>9-
"map {K          <C-w>9+
"map {L          <C-w>9>

" Buffer/Tab/Quickfix navigation
map <C-q>      :q<cr>
map <C-s>      :update<cr>
map <C-r>      :edit<cr>

map <C-h>      :tabprev<cr>
map <C-l>      :tabnext<cr>
map <C-j>      :bnext<cr>
map <C-k>      :bprev<cr>
map <C-n>      :lnext<cr>
map <C-p>      :lprev<cr>

nmap <silent> -             :call Underline('-')<cr>
nmap <silent> =             :call Underline('=')<cr>

noremap <silent> <M-d>   <C-e>
noremap <silent> <M-e>   <C-y>

" Mnemonic leader mapping to commands {{{

let g:mapleader=" "
let g:maplocalleader="'"

" prefix conventions inspired by Space/DOOM Emacs

nmap <silent> <leader>'     :vsp<cr>
nmap <silent> <leader>"     :sp<cr>
nmap <silent> <leader>h     :setlocal hlsearch!<cr>
nmap <silent> <leader><tab> <c-^>

nmap <silent> <leader>d     :bdelete<cr>
nmap <silent> <leader>p     :setlocal paste!<cr>
nmap <silent> <leader>q     :quit<cr>

nmap <leader>:      :Commands<cr>
nmap <leader>c      :Inspect<cr>

" buffers
nmap <leader>bb     :FzfBuffers<cr>
nmap <leader>bd     :bd<cr>
nmap <leader>bn     :vnew<cr>

" use e as alias of buffEr mnemonics
nmap <leader>e      :FzfBuffers<cr>

" files
nmap <leader>fa     :FilesAll<cr>
nmap <leader>fe     :edit %%
nmap <leader>ff     :Files<cr>
nmap <leader>fh     :edit ~/
nmap <leader>fr     :FzfHistory<cr>
nmap <leader>fz     :call fzf#run(fzf#wrap('fzf-custom', {'source': ''}))

" git
nmap <leader>gC     :Git commit<cr>
nmap <leader>ga     :Gwrite<cr>
nmap <leader>gb     :Git blame<cr>
nmap <leader>gc     :FzfCommits<cr>
nmap <leader>gd     :Git diff<cr>
nmap <leader>gf     :FzfGFiles<cr>
nmap <leader>gg     :vert Git<cr>60<c-w>\|
nmap <leader>gl     :Glog<cr>
nmap <leader>gs     :Git<cr>
nmap <leader>gv     :Gvdiffsplit<cr>

nmap <leader>gS     <Plug>(GitGutterStageHunk)
nmap <leader>gU     <Plug>(GitGutterUndoHunk)
nmap <leader>g[     <Plug>(GitGutterPrevHunk)
nmap <leader>g]     <Plug>(GitGutterNextHunk)
nmap <leader>gp     <Plug>(GitGutterPreviewHunk)

" search
nmap <leader>s/     :FzfHistory/<cr>
nmap <leader>s:     :FzfHistory:<cr>
nmap <leader>sB     :FzfLines<cr>
nmap <leader>sb     :FzfBLines<cr>
nmap <leader>sc     :FzfCommands<cr>
nmap <leader>ss     :RG<cr>

" toggles
nmap <silent> <leader>t1    :MyStatusLineLong<cr>
nmap <silent> <leader>t2    :MyStatusLineShort<cr>
nmap <silent> <leader>tg    :GitGutterToggle<cr>
nmap <silent> <leader>th    :setlocal hlsearch!<cr>
nmap <silent> <leader>tj    :call ToggleFastEsc()<cr>
nmap <silent> <leader>tp    :setlocal paste!<cr>
nmap <silent> <leader>tr    :RainbowToggle<cr>
nmap <silent> <leader>ts    :setlocal spell!<cr>
nmap <silent> <leader>tw    :setlocal wrap!<cr>

" vim
nmap <leader>r      "_dwP
nmap <leader>v      :e ~/.vim/vimrc<cr>

" windows
nmap <leader>w=     <C-w>=
nmap <leader>wS     :sp<cr>
nmap <leader>wh     <C-w>h
nmap <leader>wj     <C-w>j
nmap <leader>wk     <C-w>k
nmap <leader>wl     <C-w>l
nmap <leader>wo     :tab sp<cr>
nmap <leader>wq     :quit<cr>
nmap <leader>ws     :vsp<cr>
nmap <leader>wt     <C-w>T
nmap <leader>ww     :w<cr>

nmap <leader>xm     :silent! make \| redraw! \| call ReportBuildResult()<cr>
nmap <leader>xt     :Tabularize /
nmap <leader>xr     :s/ \+/\r/g<cr>

" youcompleteme
nmap <leader>yx     :YcmCompleter FixIt<cr>
nmap <leader>yg     :YcmCompleter GoToDefinition<cr>
nmap <leader>yr     :YcmCompleter GoToReferences<cr>

" }}}

" vim-which-key setup {{{
let g:which_key_disable_default_offset = 1

let g:leader_map = {}

"let g:leader_map[" "] = "Toggle highlight search (dup h)"
let g:leader_map["'"] = "Split vertical"
let g:leader_map['"'] = "Split horizontal"
let g:leader_map[':'] = "Search commands"

let g:leader_map['c'] = "Show highlight group"
let g:leader_map['e'] = "Search buffer by name"
let g:leader_map['d'] = "Unload buffer"
let g:leader_map["h"] = "Toggle highlight search"
let g:leader_map["p"] = "Toggle paste mode"
let g:leader_map['q'] = "Quit window"
let g:leader_map['r'] = "Replace word with register"
let g:leader_map['v'] = "Edit vimrc"

let g:leader_map['<Tab>'] = "Goto alternate buffer"

let g:leader_map['b'] = {
    \ 'name': '+buffer',
    \ 'b': 'Find buffer',
    \ 'd': 'Unload buffer',
    \ 'n': 'New empty buffer',
    \ }

let g:leader_map['f'] = {
    \ 'name': '+file',
    \ 'a': 'Find all files including vcs-ignored',
    \ 'e': 'Edit adjacent file',
    \ 'f': 'Find file',
    \ 'h': 'Edit file from home directory',
    \ 'r': 'Recent files',
    \ 'z': 'FZF function call template',
    \ }

let g:leader_map['g'] = {
    \ 'name': '+git',
    \ 'a': 'Add',
    \ 'b': 'Blame',
    \ 'c': 'Search commits',
    \ 'd': 'Diff',
    \ 'g': 'Status (vertical)',
    \ 'l': 'File history',
    \ 's': 'Status',
    \ 'v': 'Diff (vertical)',
    \ 'p': 'Preview hunk',
    \ 'C': 'Commit',
    \ 'S': 'Stage hunk',
    \ 'U': 'Unstage hunk',
    \ '[': 'Previouw hunk',
    \ ']': 'Next hunk',
    \ }

let g:leader_map["s"] = {
    \ 'name': '+search',
    \ '/': 'Recent searchs',
    \ ':': 'Recent commands',
    \ 'B': 'Search in buffer',
    \ 'b': 'Search in all buffers',
    \ 'c': 'Search vim commands',
    \ 's': 'Search text recursively',
    \ }

let g:leader_map['t'] = {
    \ 'name': '+toggle',
    \ 'g': 'Git gutter',
    \ 'h': 'Highlight search',
    \ 'j': 'Fast escape (jj)',
    \ 'p': 'Paste mode',
    \ 'r': 'Rainbow parens',
    \ 's': 'Spell check',
    \ 'w': 'Soft wrap',
    \ }

let g:leader_map['w'] = {
    \ 'name': '+window',
    \ '=': 'Balance windows',
    \ 'S': 'Split horizontal',
    \ 'h': 'Move left',
    \ 'j': 'Move up',
    \ 'k': 'Move down',
    \ 'l': 'Move right',
    \ 'o': 'Open in new tabpage',
    \ 'q': 'Quit window',
    \ 's': 'Split vertical',
    \ 't': 'Move to new tabpage',
    \ 'w': 'Jump to last window',
    \ }

let g:leader_map['x'] = {
    \ 'name': '+execute',
    \ 'm': 'Make',
    \ 'r': 'Split line by spaces',
    \ 't': 'Tabularize',
    \ }

let g:leader_map['y'] = {
    \ 'name': '+ycm',
    \ }

call which_key#register(' ', "g:leader_map")
nnoremap <silent> <leader>          :WhichKey '<space>'<cr>
vnoremap <silent> <leader>          :WhichKeyVisual '<space>'<cr>

" }}}

let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"

vmap <up>      <Plug>SchleppUp
vmap <down>    <Plug>SchleppDown
vmap <left>    <Plug>SchleppLeft
vmap <right>   <Plug>SchleppRight

let g:tmux_navigator_no_mappings = 1

" }}}

"===[ Abbrevation ]=== {{{
"
" Common typos
iabbrev fro         for
iabbrev adn         and
iabbrev swithc      switch
iabbrev swihtc      switch
iabbrev siwthc      switch
iabbrev csae        case
iabbrev caes        case

" }}}

"===[ Autocommands setup ]=== {{{
"
augroup usr
    autocmd!
    autocmd BufEnter    * silent call EnableFastEsc()
    autocmd BufNewfile  *.php silent r ~/.vim/template/template.php | normal kdd
    autocmd BufRead     *.vim silent set foldmethod=marker
    autocmd BufRead     *.html silent RainbowToggle
    autocmd BufWrite    * call TryTrimSpace()
    "autocmd VimEnter    *.c,*.cpp,*.py vsp

    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif


    autocmd BufNewFile,BufRead  *.sol setf solidity
    autocmd BufWritePost        *.sync.py !jupytext -s %

augroup END

" }}}

"===[ Generic highlights ]=== {{{
"
syn keyword Todo    TODO NOTE FIXME REFACTOR HARDCODE HACK
syn keyword Todo    Todo Note Fixme Refactor Hardcode Hack
syn keyword Todo    todo note fixme refactor hardcode hack

hi link Noise Special
" }}}

" vim: foldmethod=marker
